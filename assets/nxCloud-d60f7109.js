import{v as t}from"./index-e881fdae.js";const g=window.location.origin,d="https://sync.wavevms.com",p=`${g}`,y="wave-health";function L(){const s=new URL(`${d}/authorize`);return s.searchParams.set("redirect_url",p),s.searchParams.set("client_id",y),s.toString()}async function h(){const s=t.cloudTokens.access_token,o=t.cloudTokens.expires_at;if(s)return o>Date.now()?s:(console.log(`Token expired at ${Date(o)}`),await w()?t.cloudTokens.access_token:(t.loggedin=!1,null))}async function w(s){const n={refresh_token:s??t.cloudTokens.refresh_token,grant_type:"refresh_token",response_type:"token",client_id:y},a={headers:{"Content-Type":"application/json"},method:"POST",body:JSON.stringify(n)};try{const e=await fetch(`${d}/oauth/token/`,a);if(!(e!=null&&e.ok))throw new Error(`Response not OK: ${e.statusText}`);const c=await e.json();return t.cloudTokens=c,!0}catch(e){return console.error(e),t.cloudTokens={},!1}}async function j(s){const n={headers:{"Content-Type":"application/json"},method:"POST",body:JSON.stringify({code:s,grant_type:"authorization_code",response_type:"token"}),credentials:"include"};try{const a=await fetch(`${d}/oauth/token/`,n);if(a.status==200){const e=await a.json();t.cloudTokens=e,t.sysList.forEach(c=>{c.tokens={}}),t.loggedin=!0,T(),console.log(`getTokensWithCode: access_token: ${t.cloudTokens.access_token}`)}}catch(a){console.error(a)}}async function S(){const s=["accessRole","id","name","stateOfHealth","ownerAccountEmail","ownerFullName","version"],o=["accessRole","name","stateOfHealth","version"],n=await h();if(n){const a={method:"GET",headers:{Authorization:`Bearer ${n}`}};try{(await(await fetch(`${d}/api/systems/`,a)).json()).forEach(i=>{let f=t.sysList.findIndex(l=>l.id==i.id);if(f>=0)for(const l of o)t.sysList[f][l]=i[l];else{const l={};for(const u of s)l[u]=i[u];f=t.sysList.push(l)-1}i.stateOfHealth=="online"&&(i.accessRole=="cloudAdmin"||i.accessRole=="owner"?m(i.id,f):t.sysList[f].restricted=!0)})}catch{}}}async function m(s,o){try{const n=await O(s,o),a=await $(`https://${s}.relay.vmsproxy.com/ec2/metrics/alarms`,n),e=_(a.reply);t.sysList[o].cameraErrorsCount=e.cameras.errors,t.sysList[o].cameraWarningsCount=e.cameras.warnings,t.sysList[o].serverErrorsCount=e.servers.errors,t.sysList[o].serverWarningsCount=e.servers.warnings,t.sysList[o].storageErrorsCount=e.storages.errors,t.sysList[o].storageWarningsCount=e.storages.warnings}catch(n){console.log(`Could not get health for ${t.sysList[o].name} ${n}`),t.sysList[o].stateOfHealth="Unreachable"}}function _(s){const o={cameras:{errors:0,warnings:0},servers:{errors:0,warnings:0},storages:{errors:0,warnings:0}};for(const[n,a]of Object.entries(s))for(let e of Object.values(a)){let c=!1,i=!1;for(let f of Object.values(e)){for(let l of Object.values(f)){for(let u of l)u.level=="error"?c=!0:u.level=="warning"&&(i=!0);if(c||i)break}if(c||i)break}c?o[n].errors++:i&&o[n].warnings++}return o}async function T(){if(t.email)return console.debug(`Introspect(): store.email = ${t.email}`),t.email;{const s=await h();if(s){const o={method:"GET",headers:{Authorization:`Bearer ${s}`}};try{const a=await(await fetch(`${d}/oauth/introspect/?token=${s}`,o)).json();return t.loggedin=!0,t.email=a.username,t.time_since_password=a.time_since_password,t.email}catch{console.log("Redirecting to Sync login")}}}}async function $(s,o){let n;const a={method:"GET",headers:{Authorization:`Bearer ${o}`}},e=await fetch(s,a);if(e!=null&&e.redirected&&!e.ok){const c=await fetch(e.url,a);if(!(c!=null&&c.ok))throw new Error(`Response not OK: ${r.statusText}`);n=await c.json()}else{if(!(e!=null&&e.ok))throw new Error(`Response not OK: ${r.statusText}`);n=await e.json()}return n}async function O(s,o){let n;const a=o??t.sysList.findIndex(c=>c.id===s),e=t.sysList[a].tokens;if(e!=null&&e.access_token&&e.expires_at>Date.now())n=e.access_token;else if(await h()){const f={refresh_token:t.cloudTokens.refresh_token,grant_type:"refresh_token",response_type:"token",scope:`cloudSystemId=${s}`},l={method:"POST",headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/json"},body:JSON.stringify(f)};try{const k=await(await fetch(`${d}/oauth/token/`,l)).json();t.sysList[a].tokens=k,n=k.access_token}catch(u){console.error(`Could not get token for system ${s}: ${u}`)}}else throw new Error("getTokenForSystem: did not receive token from getAccessToken");return n}export{j as a,L as b,d as c,S as g,T as i};
